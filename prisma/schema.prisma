// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  USER
  ADMIN
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  username        String    @unique
  hashedPassword  String
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  writtenPosts    Post[]    @relation(name: "WrittenPosts")
  writtenComments Comment[] @relation(name: "WrittenComments")
  role            Role      @default(USER)
}

model Post {
  id         String       @id @default(cuid())
  title      String
  slug       String       @unique // This is the URL-friendly version of the title (e.g. title: "Hello World" => slug: "hello-world")
  content    String
  image      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  author     User         @relation(name: "WrittenPosts", fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  comments   Comment[]    @relation(name: "PostComments")
  TagOnPosts TagOnPosts[]
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(name: "WrittenComments", fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post      @relation(name: "PostComments", fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parentId  String?   @unique
  parent    Comment?  @relation(name: "CommentParent", fields: [parentId], references: [id], onDelete: SetNull)
  children  Comment[] @relation(name: "CommentParent")
}

model Tag {
  id         String       @id @default(cuid())
  name       String       @unique
  TagOnPosts TagOnPosts[]
}

model TagOnPosts {
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  String

  @@id([postId, tagId])
}
